entity contador is
  port ( A, B : in bit_vector(3 downto 0);
         EN, CLR, load, clock : in BIT;
         C : out bit_vector(3 downto 0));
end contador;

architecture ckt of contador is
  
  signal pcd, comparacaomenor, comparacaomaior, notmenor, notmaior, auxen : BIT;
  signal aux, aux2,aux3 : bit_vector(3 downto 0);
  
  component ffjk is
    port (clk,J,K,P,C: in  BIT;
                   q: out BIT);
  end component;
  
  component updown is
    port( CD, L, R, load2, enable2: in BIT;
             Y: in  bit_vector(3 downto 0);
            S: out bit_vector(3 downto 0));
  end component;
  
  component comparador is
    port( X, Y : in bit_vector(3 downto 0);
             P : out BIT);
  end component;
  
  component ComparadorMagnitude is
    port( X, Y : in bit_vector(3 downto 0);
          Q, T : out bit_vector(3 downto 0));
  end component;
  
  begin
    
  notmenor <= not(comparacaomenor or (not(aux(3) or aux(2) or aux(1) or aux(0))));
  notmaior <= not(comparacaomaior);
  
  auxen <= EN and not(comparacaomenor and comparacaomaior);
  
  carga : ComparadorMagnitude port map(X(3) => A(3), X(2) => A(2), X(1) => A(1), X(0) => A(0), Y(3) => B(3), Y(2) => B(2), Y(1) => B(1), Y(0) => B(0),
                                       Q(3) => aux2(3), Q(2) => aux2(2), Q(1) => aux2(1), Q(0) => aux2(0), T(3) => aux3(3), T(2) => aux3(2), T(1) => aux3(1), T(0) => aux3(0));
  
  compflip : ffjk port map(clk => clock, J => '0', K => '0', P => notmenor, C => notmaior, q => pcd);  
  
  comparar : comparador port map(X(3) => aux2(3), X(2) => aux2(2), X(1) => aux2(1), X(0) => aux2(0), Y(3) => aux(3), Y(2) => aux(2), Y(1) => aux(1), Y(0) => aux(0),
                                 P => comparacaomenor);
  
  comparar2 : comparador port map(X(3) => aux3(3), X(2) => aux3(2), X(1) => aux3(1), X(0) => aux3(0), Y(3) => aux(3), Y(2) => aux(2), Y(1) => aux(1), Y(0) => aux(0),
                                 P => comparacaomaior);
                                 
  contupdown : updown port map(CD => pcd, L => CLR, R => clock, load2 => load, enable2 => auxen, Y(3) => aux2(3), Y(2) => aux2(2), Y(1) => aux2(1), Y(0) => aux2(0),
                                 S(3) => aux(3), S(2) => aux(2), S(1) => aux(1), S(0) => aux(0)); 
  
  C(3) <= aux(3);
  C(2) <= aux(2);
  C(1) <= aux(1);
  C(0) <= aux(0);                            
  
end ckt;
